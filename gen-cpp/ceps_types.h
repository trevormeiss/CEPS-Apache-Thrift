/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef ceps_TYPES_H
#define ceps_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>


namespace ceps {

class ServerAddress;

class Answer;

class InvalidOperation;

typedef struct _ServerAddress__isset {
  _ServerAddress__isset() : port(false), hostname(false) {}
  bool port :1;
  bool hostname :1;
} _ServerAddress__isset;

class ServerAddress {
 public:

  ServerAddress(const ServerAddress&);
  ServerAddress& operator=(const ServerAddress&);
  ServerAddress() : port(0), hostname() {
  }

  virtual ~ServerAddress() throw();
  int16_t port;
  std::string hostname;

  _ServerAddress__isset __isset;

  void __set_port(const int16_t val);

  void __set_hostname(const std::string& val);

  bool operator == (const ServerAddress & rhs) const
  {
    if (!(port == rhs.port))
      return false;
    if (!(hostname == rhs.hostname))
      return false;
    return true;
  }
  bool operator != (const ServerAddress &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ServerAddress &rhs) const {
    return this->hostname < rhs.hostname ||
           (this->hostname == rhs.hostname && this->port < rhs.port);
  }

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(ServerAddress &a, ServerAddress &b);

inline std::ostream& operator<<(std::ostream& out, const ServerAddress& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _Answer__isset {
  _Answer__isset() : answer(false), compTime(false), transTime(false) {}
  bool answer :1;
  bool compTime :1;
  bool transTime :1;
} _Answer__isset;

class Answer {
 public:

  Answer(const Answer&);
  Answer& operator=(const Answer&);
  Answer() : answer(0), compTime(0), transTime(0) {
  }

  virtual ~Answer() throw();
  int32_t answer;
  int32_t compTime;
  int32_t transTime;

  _Answer__isset __isset;

  void __set_answer(const int32_t val);

  void __set_compTime(const int32_t val);

  void __set_transTime(const int32_t val);

  bool operator == (const Answer & rhs) const
  {
    if (!(answer == rhs.answer))
      return false;
    if (!(compTime == rhs.compTime))
      return false;
    if (!(transTime == rhs.transTime))
      return false;
    return true;
  }
  bool operator != (const Answer &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Answer & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(Answer &a, Answer &b);

inline std::ostream& operator<<(std::ostream& out, const Answer& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _InvalidOperation__isset {
  _InvalidOperation__isset() : whatOp(false), why(false) {}
  bool whatOp :1;
  bool why :1;
} _InvalidOperation__isset;

class InvalidOperation : public ::apache::thrift::TException {
 public:

  InvalidOperation(const InvalidOperation&);
  InvalidOperation& operator=(const InvalidOperation&);
  InvalidOperation() : whatOp(0), why() {
  }

  virtual ~InvalidOperation() throw();
  int32_t whatOp;
  std::string why;

  _InvalidOperation__isset __isset;

  void __set_whatOp(const int32_t val);

  void __set_why(const std::string& val);

  bool operator == (const InvalidOperation & rhs) const
  {
    if (!(whatOp == rhs.whatOp))
      return false;
    if (!(why == rhs.why))
      return false;
    return true;
  }
  bool operator != (const InvalidOperation &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const InvalidOperation & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
  mutable std::string thriftTExceptionMessageHolder_;
  const char* what() const throw();
};

void swap(InvalidOperation &a, InvalidOperation &b);

inline std::ostream& operator<<(std::ostream& out, const InvalidOperation& obj)
{
  obj.printTo(out);
  return out;
}

} // namespace

#endif
