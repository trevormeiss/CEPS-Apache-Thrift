/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef Administrator_H
#define Administrator_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "ceps_types.h"

namespace ceps {

#ifdef _WIN32
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class AdministratorIf {
 public:
  virtual ~AdministratorIf() {}
  virtual bool connectToPlayer(const ServerAddress& serverAddress) = 0;
  virtual bool setPlayerNum(const int16_t num) = 0;
  virtual bool setInput(const int32_t value) = 0;
  virtual bool shareInput() = 0;
  virtual bool setPrime(const int32_t prime) = 0;
  virtual void evaluateEquation(Answer& _return, const std::vector<std::string> & rpnExpression) = 0;
};

class AdministratorIfFactory {
 public:
  typedef AdministratorIf Handler;

  virtual ~AdministratorIfFactory() {}

  virtual AdministratorIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(AdministratorIf* /* handler */) = 0;
};

class AdministratorIfSingletonFactory : virtual public AdministratorIfFactory {
 public:
  AdministratorIfSingletonFactory(const boost::shared_ptr<AdministratorIf>& iface) : iface_(iface) {}
  virtual ~AdministratorIfSingletonFactory() {}

  virtual AdministratorIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(AdministratorIf* /* handler */) {}

 protected:
  boost::shared_ptr<AdministratorIf> iface_;
};

class AdministratorNull : virtual public AdministratorIf {
 public:
  virtual ~AdministratorNull() {}
  bool connectToPlayer(const ServerAddress& /* serverAddress */) {
    bool _return = false;
    return _return;
  }
  bool setPlayerNum(const int16_t /* num */) {
    bool _return = false;
    return _return;
  }
  bool setInput(const int32_t /* value */) {
    bool _return = false;
    return _return;
  }
  bool shareInput() {
    bool _return = false;
    return _return;
  }
  bool setPrime(const int32_t /* prime */) {
    bool _return = false;
    return _return;
  }
  void evaluateEquation(Answer& /* _return */, const std::vector<std::string> & /* rpnExpression */) {
    return;
  }
};

typedef struct _Administrator_connectToPlayer_args__isset {
  _Administrator_connectToPlayer_args__isset() : serverAddress(false) {}
  bool serverAddress :1;
} _Administrator_connectToPlayer_args__isset;

class Administrator_connectToPlayer_args {
 public:

  Administrator_connectToPlayer_args(const Administrator_connectToPlayer_args&);
  Administrator_connectToPlayer_args& operator=(const Administrator_connectToPlayer_args&);
  Administrator_connectToPlayer_args() {
  }

  virtual ~Administrator_connectToPlayer_args() throw();
  ServerAddress serverAddress;

  _Administrator_connectToPlayer_args__isset __isset;

  void __set_serverAddress(const ServerAddress& val);

  bool operator == (const Administrator_connectToPlayer_args & rhs) const
  {
    if (!(serverAddress == rhs.serverAddress))
      return false;
    return true;
  }
  bool operator != (const Administrator_connectToPlayer_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Administrator_connectToPlayer_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Administrator_connectToPlayer_pargs {
 public:


  virtual ~Administrator_connectToPlayer_pargs() throw();
  const ServerAddress* serverAddress;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Administrator_connectToPlayer_result__isset {
  _Administrator_connectToPlayer_result__isset() : success(false) {}
  bool success :1;
} _Administrator_connectToPlayer_result__isset;

class Administrator_connectToPlayer_result {
 public:

  Administrator_connectToPlayer_result(const Administrator_connectToPlayer_result&);
  Administrator_connectToPlayer_result& operator=(const Administrator_connectToPlayer_result&);
  Administrator_connectToPlayer_result() : success(0) {
  }

  virtual ~Administrator_connectToPlayer_result() throw();
  bool success;

  _Administrator_connectToPlayer_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const Administrator_connectToPlayer_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Administrator_connectToPlayer_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Administrator_connectToPlayer_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Administrator_connectToPlayer_presult__isset {
  _Administrator_connectToPlayer_presult__isset() : success(false) {}
  bool success :1;
} _Administrator_connectToPlayer_presult__isset;

class Administrator_connectToPlayer_presult {
 public:


  virtual ~Administrator_connectToPlayer_presult() throw();
  bool* success;

  _Administrator_connectToPlayer_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Administrator_setPlayerNum_args__isset {
  _Administrator_setPlayerNum_args__isset() : num(false) {}
  bool num :1;
} _Administrator_setPlayerNum_args__isset;

class Administrator_setPlayerNum_args {
 public:

  Administrator_setPlayerNum_args(const Administrator_setPlayerNum_args&);
  Administrator_setPlayerNum_args& operator=(const Administrator_setPlayerNum_args&);
  Administrator_setPlayerNum_args() : num(0) {
  }

  virtual ~Administrator_setPlayerNum_args() throw();
  int16_t num;

  _Administrator_setPlayerNum_args__isset __isset;

  void __set_num(const int16_t val);

  bool operator == (const Administrator_setPlayerNum_args & rhs) const
  {
    if (!(num == rhs.num))
      return false;
    return true;
  }
  bool operator != (const Administrator_setPlayerNum_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Administrator_setPlayerNum_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Administrator_setPlayerNum_pargs {
 public:


  virtual ~Administrator_setPlayerNum_pargs() throw();
  const int16_t* num;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Administrator_setPlayerNum_result__isset {
  _Administrator_setPlayerNum_result__isset() : success(false) {}
  bool success :1;
} _Administrator_setPlayerNum_result__isset;

class Administrator_setPlayerNum_result {
 public:

  Administrator_setPlayerNum_result(const Administrator_setPlayerNum_result&);
  Administrator_setPlayerNum_result& operator=(const Administrator_setPlayerNum_result&);
  Administrator_setPlayerNum_result() : success(0) {
  }

  virtual ~Administrator_setPlayerNum_result() throw();
  bool success;

  _Administrator_setPlayerNum_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const Administrator_setPlayerNum_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Administrator_setPlayerNum_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Administrator_setPlayerNum_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Administrator_setPlayerNum_presult__isset {
  _Administrator_setPlayerNum_presult__isset() : success(false) {}
  bool success :1;
} _Administrator_setPlayerNum_presult__isset;

class Administrator_setPlayerNum_presult {
 public:


  virtual ~Administrator_setPlayerNum_presult() throw();
  bool* success;

  _Administrator_setPlayerNum_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Administrator_setInput_args__isset {
  _Administrator_setInput_args__isset() : value(false) {}
  bool value :1;
} _Administrator_setInput_args__isset;

class Administrator_setInput_args {
 public:

  Administrator_setInput_args(const Administrator_setInput_args&);
  Administrator_setInput_args& operator=(const Administrator_setInput_args&);
  Administrator_setInput_args() : value(0) {
  }

  virtual ~Administrator_setInput_args() throw();
  int32_t value;

  _Administrator_setInput_args__isset __isset;

  void __set_value(const int32_t val);

  bool operator == (const Administrator_setInput_args & rhs) const
  {
    if (!(value == rhs.value))
      return false;
    return true;
  }
  bool operator != (const Administrator_setInput_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Administrator_setInput_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Administrator_setInput_pargs {
 public:


  virtual ~Administrator_setInput_pargs() throw();
  const int32_t* value;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Administrator_setInput_result__isset {
  _Administrator_setInput_result__isset() : success(false) {}
  bool success :1;
} _Administrator_setInput_result__isset;

class Administrator_setInput_result {
 public:

  Administrator_setInput_result(const Administrator_setInput_result&);
  Administrator_setInput_result& operator=(const Administrator_setInput_result&);
  Administrator_setInput_result() : success(0) {
  }

  virtual ~Administrator_setInput_result() throw();
  bool success;

  _Administrator_setInput_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const Administrator_setInput_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Administrator_setInput_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Administrator_setInput_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Administrator_setInput_presult__isset {
  _Administrator_setInput_presult__isset() : success(false) {}
  bool success :1;
} _Administrator_setInput_presult__isset;

class Administrator_setInput_presult {
 public:


  virtual ~Administrator_setInput_presult() throw();
  bool* success;

  _Administrator_setInput_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class Administrator_shareInput_args {
 public:

  Administrator_shareInput_args(const Administrator_shareInput_args&);
  Administrator_shareInput_args& operator=(const Administrator_shareInput_args&);
  Administrator_shareInput_args() {
  }

  virtual ~Administrator_shareInput_args() throw();

  bool operator == (const Administrator_shareInput_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Administrator_shareInput_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Administrator_shareInput_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Administrator_shareInput_pargs {
 public:


  virtual ~Administrator_shareInput_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Administrator_shareInput_result__isset {
  _Administrator_shareInput_result__isset() : success(false) {}
  bool success :1;
} _Administrator_shareInput_result__isset;

class Administrator_shareInput_result {
 public:

  Administrator_shareInput_result(const Administrator_shareInput_result&);
  Administrator_shareInput_result& operator=(const Administrator_shareInput_result&);
  Administrator_shareInput_result() : success(0) {
  }

  virtual ~Administrator_shareInput_result() throw();
  bool success;

  _Administrator_shareInput_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const Administrator_shareInput_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Administrator_shareInput_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Administrator_shareInput_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Administrator_shareInput_presult__isset {
  _Administrator_shareInput_presult__isset() : success(false) {}
  bool success :1;
} _Administrator_shareInput_presult__isset;

class Administrator_shareInput_presult {
 public:


  virtual ~Administrator_shareInput_presult() throw();
  bool* success;

  _Administrator_shareInput_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Administrator_setPrime_args__isset {
  _Administrator_setPrime_args__isset() : prime(false) {}
  bool prime :1;
} _Administrator_setPrime_args__isset;

class Administrator_setPrime_args {
 public:

  Administrator_setPrime_args(const Administrator_setPrime_args&);
  Administrator_setPrime_args& operator=(const Administrator_setPrime_args&);
  Administrator_setPrime_args() : prime(0) {
  }

  virtual ~Administrator_setPrime_args() throw();
  int32_t prime;

  _Administrator_setPrime_args__isset __isset;

  void __set_prime(const int32_t val);

  bool operator == (const Administrator_setPrime_args & rhs) const
  {
    if (!(prime == rhs.prime))
      return false;
    return true;
  }
  bool operator != (const Administrator_setPrime_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Administrator_setPrime_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Administrator_setPrime_pargs {
 public:


  virtual ~Administrator_setPrime_pargs() throw();
  const int32_t* prime;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Administrator_setPrime_result__isset {
  _Administrator_setPrime_result__isset() : success(false) {}
  bool success :1;
} _Administrator_setPrime_result__isset;

class Administrator_setPrime_result {
 public:

  Administrator_setPrime_result(const Administrator_setPrime_result&);
  Administrator_setPrime_result& operator=(const Administrator_setPrime_result&);
  Administrator_setPrime_result() : success(0) {
  }

  virtual ~Administrator_setPrime_result() throw();
  bool success;

  _Administrator_setPrime_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const Administrator_setPrime_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Administrator_setPrime_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Administrator_setPrime_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Administrator_setPrime_presult__isset {
  _Administrator_setPrime_presult__isset() : success(false) {}
  bool success :1;
} _Administrator_setPrime_presult__isset;

class Administrator_setPrime_presult {
 public:


  virtual ~Administrator_setPrime_presult() throw();
  bool* success;

  _Administrator_setPrime_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Administrator_evaluateEquation_args__isset {
  _Administrator_evaluateEquation_args__isset() : rpnExpression(false) {}
  bool rpnExpression :1;
} _Administrator_evaluateEquation_args__isset;

class Administrator_evaluateEquation_args {
 public:

  Administrator_evaluateEquation_args(const Administrator_evaluateEquation_args&);
  Administrator_evaluateEquation_args& operator=(const Administrator_evaluateEquation_args&);
  Administrator_evaluateEquation_args() {
  }

  virtual ~Administrator_evaluateEquation_args() throw();
  std::vector<std::string>  rpnExpression;

  _Administrator_evaluateEquation_args__isset __isset;

  void __set_rpnExpression(const std::vector<std::string> & val);

  bool operator == (const Administrator_evaluateEquation_args & rhs) const
  {
    if (!(rpnExpression == rhs.rpnExpression))
      return false;
    return true;
  }
  bool operator != (const Administrator_evaluateEquation_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Administrator_evaluateEquation_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Administrator_evaluateEquation_pargs {
 public:


  virtual ~Administrator_evaluateEquation_pargs() throw();
  const std::vector<std::string> * rpnExpression;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Administrator_evaluateEquation_result__isset {
  _Administrator_evaluateEquation_result__isset() : success(false) {}
  bool success :1;
} _Administrator_evaluateEquation_result__isset;

class Administrator_evaluateEquation_result {
 public:

  Administrator_evaluateEquation_result(const Administrator_evaluateEquation_result&);
  Administrator_evaluateEquation_result& operator=(const Administrator_evaluateEquation_result&);
  Administrator_evaluateEquation_result() {
  }

  virtual ~Administrator_evaluateEquation_result() throw();
  Answer success;

  _Administrator_evaluateEquation_result__isset __isset;

  void __set_success(const Answer& val);

  bool operator == (const Administrator_evaluateEquation_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Administrator_evaluateEquation_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Administrator_evaluateEquation_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Administrator_evaluateEquation_presult__isset {
  _Administrator_evaluateEquation_presult__isset() : success(false) {}
  bool success :1;
} _Administrator_evaluateEquation_presult__isset;

class Administrator_evaluateEquation_presult {
 public:


  virtual ~Administrator_evaluateEquation_presult() throw();
  Answer* success;

  _Administrator_evaluateEquation_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class AdministratorClient : virtual public AdministratorIf {
 public:
  AdministratorClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  AdministratorClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  bool connectToPlayer(const ServerAddress& serverAddress);
  void send_connectToPlayer(const ServerAddress& serverAddress);
  bool recv_connectToPlayer();
  bool setPlayerNum(const int16_t num);
  void send_setPlayerNum(const int16_t num);
  bool recv_setPlayerNum();
  bool setInput(const int32_t value);
  void send_setInput(const int32_t value);
  bool recv_setInput();
  bool shareInput();
  void send_shareInput();
  bool recv_shareInput();
  bool setPrime(const int32_t prime);
  void send_setPrime(const int32_t prime);
  bool recv_setPrime();
  void evaluateEquation(Answer& _return, const std::vector<std::string> & rpnExpression);
  void send_evaluateEquation(const std::vector<std::string> & rpnExpression);
  void recv_evaluateEquation(Answer& _return);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class AdministratorProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<AdministratorIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (AdministratorProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_connectToPlayer(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_setPlayerNum(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_setInput(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_shareInput(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_setPrime(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_evaluateEquation(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  AdministratorProcessor(boost::shared_ptr<AdministratorIf> iface) :
    iface_(iface) {
    processMap_["connectToPlayer"] = &AdministratorProcessor::process_connectToPlayer;
    processMap_["setPlayerNum"] = &AdministratorProcessor::process_setPlayerNum;
    processMap_["setInput"] = &AdministratorProcessor::process_setInput;
    processMap_["shareInput"] = &AdministratorProcessor::process_shareInput;
    processMap_["setPrime"] = &AdministratorProcessor::process_setPrime;
    processMap_["evaluateEquation"] = &AdministratorProcessor::process_evaluateEquation;
  }

  virtual ~AdministratorProcessor() {}
};

class AdministratorProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  AdministratorProcessorFactory(const ::boost::shared_ptr< AdministratorIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< AdministratorIfFactory > handlerFactory_;
};

class AdministratorMultiface : virtual public AdministratorIf {
 public:
  AdministratorMultiface(std::vector<boost::shared_ptr<AdministratorIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~AdministratorMultiface() {}
 protected:
  std::vector<boost::shared_ptr<AdministratorIf> > ifaces_;
  AdministratorMultiface() {}
  void add(boost::shared_ptr<AdministratorIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  bool connectToPlayer(const ServerAddress& serverAddress) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->connectToPlayer(serverAddress);
    }
    return ifaces_[i]->connectToPlayer(serverAddress);
  }

  bool setPlayerNum(const int16_t num) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->setPlayerNum(num);
    }
    return ifaces_[i]->setPlayerNum(num);
  }

  bool setInput(const int32_t value) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->setInput(value);
    }
    return ifaces_[i]->setInput(value);
  }

  bool shareInput() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->shareInput();
    }
    return ifaces_[i]->shareInput();
  }

  bool setPrime(const int32_t prime) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->setPrime(prime);
    }
    return ifaces_[i]->setPrime(prime);
  }

  void evaluateEquation(Answer& _return, const std::vector<std::string> & rpnExpression) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->evaluateEquation(_return, rpnExpression);
    }
    ifaces_[i]->evaluateEquation(_return, rpnExpression);
    return;
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class AdministratorConcurrentClient : virtual public AdministratorIf {
 public:
  AdministratorConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  AdministratorConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  bool connectToPlayer(const ServerAddress& serverAddress);
  int32_t send_connectToPlayer(const ServerAddress& serverAddress);
  bool recv_connectToPlayer(const int32_t seqid);
  bool setPlayerNum(const int16_t num);
  int32_t send_setPlayerNum(const int16_t num);
  bool recv_setPlayerNum(const int32_t seqid);
  bool setInput(const int32_t value);
  int32_t send_setInput(const int32_t value);
  bool recv_setInput(const int32_t seqid);
  bool shareInput();
  int32_t send_shareInput();
  bool recv_shareInput(const int32_t seqid);
  bool setPrime(const int32_t prime);
  int32_t send_setPrime(const int32_t prime);
  bool recv_setPrime(const int32_t seqid);
  void evaluateEquation(Answer& _return, const std::vector<std::string> & rpnExpression);
  int32_t send_evaluateEquation(const std::vector<std::string> & rpnExpression);
  void recv_evaluateEquation(Answer& _return, const int32_t seqid);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  ::apache::thrift::async::TConcurrentClientSyncInfo sync_;
};

#ifdef _WIN32
  #pragma warning( pop )
#endif

} // namespace

#endif
